// DO NOT EDIT IN APPS SCRIPT UI!!!
// SEE https://github.com/cdeevfrr/frisbeepoll INSTEAD

/**
 * Google Apps Script backend for Frisbee Poll
 *
 * Exposes a simple JSON API:
 *   - GET action=getPollResponses
 *   - POST action=putPollResponse
 *   - POST action=deletePollResponse
 *   - POST action=postPoll
 * 
 * File originally generated by chatGPT.
 */

/**
 * @OnlyCurrentDoc
 * ^ Restricts the app script to only request access to one google sheet, not all.
 */


// === Entry points ===
//
// These act like routers.
// AppsScript only supports POST and GET, so to support our
// other operations (eg delete poll)
// we add a special 'action' parameter to all requests.
// These router-like functions look at the 'action' parameter to decide
// what to do here.

function doGet(e) {
  try {
    const action = e.parameter.action;
    if (action === "getPollResponses") {
      return jsonResponse(getPollResponses());
    }
    return badRequest("Unknown GET action: " + action);
  } catch (err) {
    return serverError(err);
  }
}

function doPost(e) {
  try {
    const action = e.parameter.action;
    const body = e.postData ? JSON.parse(e.postData.contents) : {};

    if (action === "putPollResponse") {
      putPollResponse(body);
      return jsonResponse({ status: "ok" });
    }

    if (action === "deletePollResponse") {
      deletePollResponse(body);
      return jsonResponse({ status: "ok" });
    }

    if (action === "postPoll") {
      createPoll(body); // body should be a string (poll name)
      return jsonResponse({ status: "ok" });
    }

    return badRequest("Unknown POST action: " + action);
  } catch (err) {
    return serverError(err);
  }
}


// === Core functions ===

function getPollResponses() {
  const sheet = getCurrentPollSheet();
  if (!sheet) return { pollId: "", responses: [] };

  const pollId = sheet.getName();
  const data = sheet.getDataRange().getValues();
  const headers = data.shift(); // trim header row
  const rows = data.map(r => {
    const obj = {};
    headers.forEach((h, i) => obj[h] = r[i]);
    if (obj.timestamp) {
      obj.timestamp = new Date(obj.timestamp).toISOString();
    }
    return obj;
  });

  return { pollId, responses: rows };
}

function putPollResponse(response) {
  const sheet = getCurrentPollSheet();
  if (!sheet) throw new Error("No active poll found");

  const data = sheet.getDataRange().getValues();
  const headers = data.shift();
  const sourceIdIndex = headers.indexOf("sourceID");

  // Remove old rows with same sourceID
  for (let i = data.length - 1; i >= 0; i--) {
    if (data[i][sourceIdIndex] === response.sourceID) {
      sheet.deleteRow(i + 2); // +2 = 1 header + 1-based index
    }
  }

  // Insert new row
  const row = [
    response.userName,
    response.sourceID,
    response.pollId,
    response.responseDetails.willComeIfAtLeast,
    response.responseDetails.willBring,
    response.responseDetails.weather,
    new Date()
  ];
  sheet.appendRow(row);
}

function deletePollResponse(body) {
  const sheet = getCurrentPollSheet();
  if (!sheet) throw new Error("No active poll found");

  const data = sheet.getDataRange().getValues();
  const headers = data.shift();
  const sourceIdIndex = headers.indexOf("sourceID");

  for (let i = data.length - 1; i >= 0; i--) {
    if (data[i][sourceIdIndex] === body.sourceID) {
      sheet.deleteRow(i + 2);
    }
  }
}

function createPoll(pollName) {
  const ss = SpreadsheetApp.getActiveSpreadsheet();

  // Make a new tab for this poll
  let sheet = ss.getSheetByName(pollName);
  if (sheet) { // If duplicate poll name, delete the old poll.
    ss.deleteSheet(sheet);
  }
  sheet = ss.insertSheet(pollName);

  // Initialize headers
  sheet.appendRow([
    "userName",
    "sourceID",
    "pollId",
    "willComeIfAtLeast",
    "willBring",
    "weather",
    "timestamp"
  ]);
}

function getCurrentPollSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheets = ss.getSheets();
  if (sheets.length === 0) return null;
  return sheets[sheets.length - 1]; // last-created sheet
}


// === Helpers ===

function jsonResponse(obj) {
  return ContentService
    .createTextOutput(JSON.stringify(obj))
    .setMimeType(ContentService.MimeType.JSON);
}

function badRequest(msg) {
  return ContentService
    .createTextOutput(JSON.stringify({ error: msg }))
    .setMimeType(ContentService.MimeType.JSON);
}

function serverError(err) {
  return ContentService
    .createTextOutput(JSON.stringify({ error: err.message }))
    .setMimeType(ContentService.MimeType.JSON);
}
